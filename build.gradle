apply plugin: "java"
apply plugin: "maven"
apply plugin: "signing"

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "eu.lestard"
version = "0.1.2"


repositories {
    mavenLocal()
    mavenCentral()
}


dependencies {
    compile "org.assertj:assertj-core:1.6.0"

    // testing
    testCompile "junit:junit:4.11"
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked"
        }
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from "build/docs/javadoc"
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = "sources"
}


artifacts {
    archives jar

    archives javadocJar
    archives sourcesJar
}

def sonatypeRepositoryUrl

def isDevBuild
def isSnapshotBuild
def isReleaseBuild



// release with 'gradle uploadArchives -Prelease'
// release snapshot with 'gradle uploadArchives -Psnapshot'
if (hasProperty("release")) {
    println "release"
    isReleaseBuild = true
    sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
} else if (hasProperty("snapshot")) {
    println "snapshot"
    isSnapshotBuild = true
    version += "-SNAPSHOT"
    sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
} else {
    println "dev build"
    isDevBuild = true
}

//********* artifact signing *********
if (isReleaseBuild) {
    signing {
        sign configurations.archives
    }
} else {
    task signArchives {
        // do nothing
    }
}


uploadArchives {
    repositories {
        if (isDevBuild) {
            mavenLocal()
        } else {
            mavenDeployer {
                if(isReleaseBuild) {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                }

                repository(url: sonatypeRepositoryUrl) {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                pom.project {
                    name = "assertj-javafx"
                    packaging = "jar"
                    description "AssertJ-JavaFX is a package of assertj assertions for JavaFX"
                    url "https://github.com/lestard/assertj-javafx"

                    scm {
                        url "scm:git@github.com:lestard/assertj-javafx.git"
                        connection "scm:git@github.com:lestard/assertj-javafx.git"
                        developerConnection "scm:git@github.com:lestard/assertj-javafx.git"
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id "manuel.mauky"
                            name "Manuel Mauky"
                        }
                    }
                }
            }
        }
    }
}

import org.gradle.plugins.signing.Sign

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        // Use Java 6's console to read from the console (no good for a CI environment)
        Console console = System.console()
        console.printf "\n\nWe have to sign some things in this build.\n\nPlease enter your signing details.\n\n"

        def password = console.readPassword("PGP Private Key Password: ")

        allprojects { ext."signing.password" = password }

        console.printf "\nThanks.\n\n"
    }
}

